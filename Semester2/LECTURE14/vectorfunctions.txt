
- `erase(iterator)`: Removes an element at the specified position. `v.erase(v.begin() + 1)`. Time complexity: O(N), Space complexity: O(1)
- `begin()`: Returns an iterator pointing to the first element. `vector<int>::iterator it = v.begin();`. Time complexity: O(1), Space complexity: O(1)
- `end()`: Returns an iterator pointing one past the last element. `vector<int>::iterator it = v.end();`. Time complexity: O(1), Space complexity: O(1)
- `resize(new_size)`: Changes the size of the vector. `v.resize(4);`. Time complexity: O(N), Space complexity: O(N)
- `reserve(capacity)`: Allocates memory for a specified capacity. `v.reserve(100);`. Time complexity: O(N), Space complexity: O(N)
- `swap(vector2)`: Swaps the contents of two vectors. `v.swap(vector2);`. Time complexity: O(1), Space complexity: O(1)
- `find(element)`: Searches for an element and returns its iterator or `end()` if not found. `vector<int>::iterator it = find(v.begin(), v.end(), 42);`. Time complexity: O(N) or O(log N) (if sorted), Space complexity: O(1)
- `sort()`: Sorts the elements in ascending order. `sort(v.begin(), v.end());`. Time complexity: O(NlogN), Space complexity: O(1)
- `reverse()`: Reverses the order of the elements in the vector. `reverse(v.begin(), v.end());`. Time complexity: O(N), Space complexity: O(1)
- `push_back(value)`: Appends a new element at the end of the vector. `v.push_back(10);`. Time complexity: O(1) amortized, Space complexity: O(1)
- `pop_back()`: Removes the last element in the vector. `v.pop_back();`. Time complexity: O(1), Space complexity: O(1)
- `insert(position, value)`: Inserts a new element before the specified position. `v.insert(v.begin() + 1, 20);`. Time complexity: O(N), Space complexity: O(1)
- `clear()`: Removes all elements from the vector. `v.clear();`. Time complexity: O(N), Space complexity: O(1)
- `empty()`: Checks if the vector is empty. `bool isEmpty = v.empty();`. Time complexity: O(1), Space complexity: O(1)
- `size()`: Returns the number of elements in the vector. `size_t size = v.size();`. Time complexity: O(1), Space complexity: O(1)
- `capacity()`: Returns the size of the allocated storage capacity. `size_t capacity = v.capacity();`. Time complexity: O(1), Space complexity: O(1)
- `shrink_to_fit()`: Reduces the capacity to fit the size and releases unused memory. `v.shrink_to_fit();`. Time complexity: O(N), Space complexity: O(1)
- `at(position)`: Returns a reference to the element at the specified position with bounds checking. `int& elem = v.at(2);`. Time complexity: O(1), Space complexity: O(1)
- `operator[](index)`: Returns a reference to the element at the specified index without bounds checking. `int& elem = v[2];`. Time complexity: O(1), Space complexity: O(1)
- `front()`: Returns a reference to the first element. `int& frontElem = v.front();`. Time complexity: O(1), Space complexity: O(1)
- `back()`: Returns a reference to the last element. `int& backElem = v.back();`. Time complexity: O(1), Space complexity: O(1)
- `assign(count, value)`: Assigns new contents to the vector, replacing its current contents. `v.assign(5, 10);`. Time complexity: O(N), Space complexity: O(N)
- `data()`: Returns a direct pointer to the memory array used internally by the vector. `int* ptr = v.data();`. Time complexity: O(1), Space complexity: O(1)
- `emplace(position, args)`: Constructs an element in place at the specified position. `v.emplace(v.begin(), 30);`. Time complexity: O(N), Space complexity: O(1)
- `emplace_back(args)`: Constructs an element in place at the end of the vector. `v.emplace_back(40);`. Time complexity: O(1) amortized, Space complexity: O(1)


